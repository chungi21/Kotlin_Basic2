package sec02

// 인자와 반환값이 없는 람다식을 만들고 새로운 변수에 람다식을 대입하는 실습
fun main() {
    // 인자와 반환값이 없는 람다식을 out 변수에 할당을 했기에 변수를 함수로 사용할 수 있다.
    val out = {println("대한민국 만세!")}
    out() // 대한민국 만세!

    // 새로운 변수에 out이란 람다식이 대입되어져 있는 변수를 대입할 수 있다.
    val new = out
    new() // 대한민국 만세!

    // 람다식은 인자가 없거나 반환값이 없을 수 있다.
    // 람다식 선언 부분을 보면 화살표 왼쪽에는 인자가 없음을 나타내는 ()가 왔고
    // 오른쪽에는 반환값이 없는 Unit 이라는 특수한 객체로 정의 된다.
    // 람다식은 이름이 없는 함수(익명함수)는 함수형 프로그래밍에서 아주 중요한 개념이다.
    // 람다식은 많은 코드들을 간략화 하고
    // 함수 자체를 인자나 매개변수로 이용할 수 있어 프로그램의 효율성도 높일수가 있다.

    // 함수에 내용을 할당하거나 이자 혹은 반환값이 자유롭게 넘기려면 그에 대한 호출 방법을 이해를 해야 한다.
    // 기본형 변수로 할당된 값은 스택에 있고 다른 함수에 인자로 전달하는 경우는 해당 값이 복사되어 전달된다.
    // 참조형 변수는 항당된 객체의 주소를 가지고 있는 변수가 스택에 있고 생성된 객체는 힙에 존재한다.
    // JVM에서 실행되는 자바나 코틀린은 함수를 호출할 때 인자의 값을 복사하는 '값에 의한 호출(Call By Value)' 밖에 없다.
    // 주소값 자체가 사용되니 이 값도 주소 자체를 전달하는 것이 아니고 주소값을 복사하는 개념으로
    // 자바나 코틀린은 값의 의한 호출 밖에 존재한다.
    // 단, 값에 의해 호출이라도 기본형은 호출한 곳에 영향을 끼치지 않는다.
    // 참조형은 주소값을 복사가 되어 알고 있기에 객체의 멤버들의 값들을 수정할 수 있다는 점이 확연히 다르다.
}